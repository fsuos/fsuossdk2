IF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "Arm")
    include_directories(/data/crosscompile/rootfs-dev2/usr/include)
    set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-Arm-Debug/output)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    add_definitions(
    -DSMDDEVICE
)
add_definitions(-std=c++14)
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ArmA7")
    set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-Arm-A7-Debug/output)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    add_definitions(
    -DSMDDEVICE
)
add_definitions(-std=c++14)
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ArmA8")
    set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-Arm-A8-Debug/output)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    add_definitions(
    -DSMDDEVICE
)
add_definitions(-std=c++14)
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ArmNUC")
    set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-Arm-NUC-Debug/output)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
            add_definitions(
    -DSMDDEVICE
)
add_definitions(-std=c++14)
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ArmZNV")
    set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-Arm-ZNV-Debug/output)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
            add_definitions(
    -DSMDDEVICE
)
add_definitions(-std=c++14)
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ArmIG2000")
    set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-Arm-IG2000-Debug/output)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
            add_definitions(
    -DSMDDEVICE
)
add_definitions(-std=c++14)
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "MipsDGM")
    set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-MIPS-DGM-Debug/output)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
            add_definitions(
    -DSMDDEVICE
)
add_definitions(-std=c++14)
ELSEIF(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "ArmEISU")
    set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-Arm-EISU-Debug/output)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
    add_definitions(
        -DSMDDEVICE;-DBOOST_ASIO_DISABLE_CONCEPTS;-DBOOST_ASIO_DISABLE_STD_ATOMIC;-DBOOST_ASIO_DISABLE_THREADS
    )
    add_definitions(-std=c++11)
#link_directories(
#    .
#    ../../libvdevice/ArmZNVEISU
#)
set(CMAKE_CXX_COMPILE_OPTIONS_PIC "")
set(CMAKE_SHARED_LIBRARY_CXX_FLAGS "")
ELSE()
    include_directories(${WORKSPACE_PATH}/devroot/usr/include    ${WORKSPACE_PATH}/devroot/usr/include/bsoncxx/v_noabi    ${WORKSPACE_PATH}/devroot/usr/include/mongocxx/v_noabi)
ENDIF()
